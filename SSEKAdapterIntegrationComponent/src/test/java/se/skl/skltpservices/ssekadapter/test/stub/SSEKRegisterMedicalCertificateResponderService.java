/**
 * Copyright (c) 2014 Inera AB, <http://inera.se/>
 *
 * This file is part of SKLTP.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */
package se.skl.skltpservices.ssekadapter.test.stub;

import java.net.URL;

import javax.jws.WebService;
import javax.xml.namespace.QName;
import javax.xml.ws.WebServiceClient;

import org.ssek.v2.SSEK;

import se.inera.ifv.registermedicalcertificate.v3.rivtabp20.SSEKRegisterMedicalCertificateResponderInterface;
import se.inera.ifv.registermedicalcertificateresponder.v3.RegisterMedicalCertificateResponseType;
import se.inera.ifv.registermedicalcertificateresponder.v3.RegisterMedicalCertificateType;
import se.inera.ifv.v2.ResultCodeEnum;
import se.inera.ifv.v2.ResultOfCall;

/**
 * This class was generated by Apache CXF 2.7.10
 * 2016-11-03T20:25:17.185+01:00
 * Generated source version: 2.7.10
 * 
 */
@WebService(serviceName = "SSEKRegisterMedicalCertificateResponderService",
endpointInterface = "se.inera.ifv.registermedicalcertificate.v3.rivtabp20.SSEKRegisterMedicalCertificateResponderInterface",
portName = "SSEKRegisterMedicalCertificateResponderPort",
targetNamespace = "urn:riv:insuranceprocess:healthreporting:RegisterMedicalCertificate:3:rivtabp20")
public class SSEKRegisterMedicalCertificateResponderService implements SSEKRegisterMedicalCertificateResponderInterface {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("urn:riv:insuranceprocess:healthreporting:RegisterMedicalCertificate:3:rivtabp20", "SSEKRegisterMedicalCertificateResponderService");
    public final static QName SSEKRegisterMedicalCertificateResponderPort = new QName("urn:riv:insuranceprocess:healthreporting:RegisterMedicalCertificate:3:rivtabp20", "SSEKRegisterMedicalCertificateResponderPort");
    static {
        URL url = SSEKRegisterMedicalCertificateResponderService.class.getClassLoader().getResource("schemas/interactions/RegisterMedicalCertificateInteraction/SSEKegisterMedicalCertificateInteraction_3.1_rivtabp20.wsdl");
        if (url == null) {
            java.util.logging.Logger.getLogger(SSEKRegisterMedicalCertificateResponderService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "classpath:schemas/interactions/RegisterMedicalCertificateInteraction/SSEKegisterMedicalCertificateInteraction_3.1_rivtabp20.wsdl");
        }       
        WSDL_LOCATION = url;   
    }
	@Override
	public RegisterMedicalCertificateResponseType ssekRegisterMedicalCertificate(SSEK sseKrequest,
			RegisterMedicalCertificateType parameters) {

		String result = "SSEK Header is [";
		if(sseKrequest != null) {
			result += sseKrequest.getReceiverId() + ", ";
			result += sseKrequest.getSenderId() + ", ";
			result += sseKrequest.getTxId() + ", ";
		}
		result += "]";

		final RegisterMedicalCertificateResponseType response = new RegisterMedicalCertificateResponseType();

		ResultOfCall value = new ResultOfCall();
		value.setResultCode(ResultCodeEnum.OK);
		value.setInfoText(result);
		response.setResult(value);

        return response;
	}

}
